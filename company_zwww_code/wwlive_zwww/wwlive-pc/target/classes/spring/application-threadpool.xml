<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
  http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">
	<!-- 配置Spring线程池 -->
	<bean id="taskExecutor"  
        class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor" destroy-method="destroy">
        <!-- 线程池维护线程的最少数量 -->
        <property name="corePoolSize" value="30" />
        <!-- 线程池维护线程的最大数量 -->  
        <property name="maxPoolSize" value="500" />
        <!-- 线程池所使用的缓冲队列  当corePoolSize没有空闲线程的时候，允许queueCapacity个线程任务等待,queueCapacity队列满时!才会在corePoolSize的基础上,maxPoolSize之内进行新的线程的创建-->
        <property name="queueCapacity" value="100" />
        <!-- 线程池维护线程所允许的空闲时间 单位 毫秒 -->
        <property name="keepAliveSeconds" value="10000" />
        <!-- 异常处理策略 -->
        <property name="rejectedExecutionHandler"> 
        	 <!-- AbortPolicy:直接抛出java.util.concurrent.RejectedExecutionException异常 -->
        	 <!-- CallerRunsPolicy:主线程直接执行该任务，执行完之后尝试添加下一个任务到线程池中，可以有效降低向线程池内添加任务的速度 --> 
        	 <!-- DiscardOldestPolicy:抛弃旧的任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->           
             <!-- DiscardPolicy:抛弃当前任务、暂不支持；会导致被丢弃的任务无法再次被执行 -->  
            <bean class="java.util.concurrent.ThreadPoolExecutor$AbortPolicy" />  
        </property>  
    </bean>
</beans>