                            从零搭建react全通
1 初始化 npm init (根目录)
2 根目录下创建 webpack.dev.config.js(开发配置文件)
3 新建入口文件 src/index.js
4 使用babel编译es6,es7 
    ① npm install babel-core babel-loader babel-preset-es2015 babel-preset-react babel-preset-stage-0 --save-dev
    ② 在根目录新建babel配置文件
        {
            "presets": [
                "es2015",
                "react",
                "stage-0"
            ],
            "plugins": []
        }
5 修改webpack.dev.config.js 增加babel-loader
    /*src文件夹下面的以.js结尾的文件，要使用babel解析*/
    /*cacheDirectory是用来缓存编译结果，下次编译加速*/
    module: {
        rules: [{
            test: /\.js$/,
            use: ['babel-loader?cacheDirectory=true'],
            include: path.join(__dirname, 'src')
        }]
    }
    (使用webpack --config webpack.dev.config.js打包测试看能否正常编译)
6 安装react npm install react react-dom --save
7 修改src/index.js 入口 使用react
    import React from 'react';
    import ReactDom from 'react-dom';
    ReactDom.render(
    <div>Hello React!</div>, document.getElementById('app'));  
8 打包命令优化
    "scripts": {
        "test": "echo \"Error: no test specified\" && exit 1",
        "dev-build": "webpack --config webpack.dev.config.js"
    }
9 react-router路由
   ① npm install react-router-dom --save
   ② 新建router文件夹和组件
   ③ 路由和页面建好了，在入口文件src/index.js引用Router
   ④ 这样路由就建好了 此时执行打包命令 npm run dev-build 打开index.html查看效果
    那么问题来了~我们发现点击‘首页’和‘Page1’没有反应。不要惊慌，这是正常的。
    我们之前一直用这个路径访问index.html，类似这样：file:///F:/react/react-family/dist/index.html。
    这种路径了，不是我们想象中的路由那样的路径http://localhost:3000~我们需要配置一个简单的WEB服务器，指向index.html~有下面两种方法来实现
    Nginx, Apache, IIS等配置启动一个简单的的WEB服务器。
    使用webpack-dev-server来配置启动WEB服务器。
10 安装开发服务 webpack-dev-server
    ① npm install webpack-dev-server@2 --save-dev
    ② 修改webpack.dev.config.js,增加webpack-dev-server的配置。
    ③ 优化启动服务操作
        "scripts": {
            "test": "echo \"Error: no test specified\" && exit 1",
            "dev-build": "webpack --config webpack.dev.config.js",
            "start": "webpack-dev-server --config webpack.dev.config.js"
        }
11 模块热更新
    ① package.json 增加 --hot
    "start": "webpack-dev-server --config webpack.dev.config.js --color --progress --hot"
    ② src/index.js 增加module.hot.accept(),如下。当模块更新的时候，通知index.js。
        import React from 'react';
        import ReactDom from 'react-dom';
        import getRouter from './router/router';
        if (module.hot) {
            module.hot.accept();
        }
    注意：以上方式就可以实现热更新，但存在一个问题，那就是更新的时候react的状态state会重置
    react中实现热更新正确方法如下：
    ① 引入react-hot-loader
        npm install react-hot-loader@next --save-dev
    ② 需要做如下修改
    .babelrc文件修改
        {
        "presets": [
            "es2015",
            "react",
            "stage-0"
        ],
        "plugins": [
            "react-hot-loader/babel"
        ]
        }
    webpack.dev.config.js入口增加react-hot-loader/patch
    webpack.dev.config.js
    entry: [
        'react-hot-loader/patch',
        path.join(__dirname, 'src/index.js')
    ]
    src/index.js修改如下
    import React from 'react';
    import ReactDom from 'react-dom';
    import {AppContainer} from 'react-hot-loader';
    import getRouter from './router/router';
    /*初始化*/
    renderWithHotReload(getRouter());
    /*热更新*/
    if (module.hot) {
        module.hot.accept('./router/router', () => {
            const getRouter = require('./router/router').default;
            renderWithHotReload(getRouter());
        });
    }
    function renderWithHotReload(RootElement) {
        ReactDom.render(
            <AppContainer>
                {RootElement}
            </AppContainer>,
            document.getElementById('app')
        )
    }
    现在，执行npm start，试试。是不是修改页面的时候，state不更新了？
12 文件路径优化
    webpack提供了一个别名配置，就是我们无论在哪个路径下，引用都可以这样
    import Home from 'pages/Home/Home';
    下面我们来配置下，修改webpack.dev.config.js，增加别名~
    webpack.dev.config.js
    resolve: {
        alias: {
            pages: path.join(__dirname, 'src/pages'),
            component: path.join(__dirname, 'src/component'),
            router: path.join(__dirname, 'src/router')
        }
    }
    然后我们把之前使用的绝对路径统统改掉。
    src/router/router.js
    import Home from 'pages/Home/Home';
    import Page1 from 'pages/Page1/Page1';
    src/index.js
    import getRouter from 'router/router';
13 rudux(类似于vue中的vuex)
    ① 安装 npm install redux --save
